{
	"info": {
		"_postman_id": "62f4c481-5a3a-4ca8-a09c-16d2d14ff775",
		"name": "Productos - Tiendas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29422849",
		"_collection_link": "https://www.postman.com/bold-flare-296231/workspace/misw4403-prueba-practica/collection/29422849-62f4c481-5a3a-4ca8-a09c-16d2d14ff775?action=share&source=collection_link&creator=29422849"
	},
	"item": [
		{
			"name": "Crear un producto válido (pre requisito)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const types = ['Perecedero', 'No perecedero'];\r",
							"const randomType = types[Math.floor(Math.random() * types.length)]\r",
							"\r",
							"pm.collectionVariables.set('product_name', pm.variables.replaceIn('{{$randomDepartment}}'));\r",
							"pm.collectionVariables.set('product_price', pm.variables.replaceIn('{{$randomInt}}'));\r",
							"pm.collectionVariables.set('product_type', randomType);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test(\"Should have a string as id\", function () {\r",
							"    pm.expect(data.id).to.be.a(\"string\");\r",
							"    pm.collectionVariables.set(\"product_id\", data.id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{product_name}}\",\r\n    \"type\": \"{{product_type}}\",\r\n    \"price\": {{product_price}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear una tienda válida 1 (pre-requisito)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const cities = ['BOG', 'MED', 'SMR', 'CLO', 'CTG'];\r",
							"const randomCity = cities[Math.floor(Math.random() * cities.length)]\r",
							"\r",
							"pm.collectionVariables.set('store_name', pm.variables.replaceIn('{{$randomDepartment}}'));\r",
							"pm.collectionVariables.set('store_city', randomCity);\r",
							"pm.collectionVariables.set('store_address', pm.variables.replaceIn('{{$randomStreetAddress}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test(\"Should have a string as id\", function () {\r",
							"    pm.expect(data.id).to.be.a(\"string\");\r",
							"    pm.collectionVariables.set(\"store_id\", data.id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{store_name}}\",\r\n    \"city\": \"{{store_city}}\",\r\n    \"address\": \"{{store_address}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/stores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear una tienda válida 2 (pre-requisito) Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const cities = ['BOG', 'MED', 'SMR', 'CLO', 'CTG'];\r",
							"const randomCity = cities[Math.floor(Math.random() * cities.length)]\r",
							"\r",
							"pm.collectionVariables.set('store_name_2', pm.variables.replaceIn('{{$randomDepartment}}'));\r",
							"pm.collectionVariables.set('store_city_2', randomCity);\r",
							"pm.collectionVariables.set('store_address_2', pm.variables.replaceIn('{{$randomStreetAddress}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test(\"Should have a string as id\", function () {\r",
							"    pm.expect(data.id).to.be.a(\"string\");\r",
							"    pm.collectionVariables.set(\"store_id_2\", data.id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{store_name_2}}\",\r\n    \"city\": \"{{store_city_2}}\",\r\n    \"address\": \"{{store_address_2}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/stores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar una nueva tienda a las oferentes de un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it contains added store\", function () {\r",
							"    var found = false; \r",
							"\r",
							"    for (var i = 0; i < data.stores.length; i++) {\r",
							"        if (data.stores[i].id === pm.collectionVariables.get(\"store_id\")) {\r",
							"            found = true;\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"\r",
							"    pm.expect(found).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Asociar una tienda que no existe a las oferentes de un producto.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('invalid_resource', pm.variables.replaceIn('{{$randomUUID}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/{{invalid_resource}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{invalid_resource}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener todas las tiendas que ofrecen un producto.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Number of products > 0', function () {\r",
							"   pm.expect(data.length).to.greaterThan(0)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una tienda que ofrece un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should have a string as id\", function () {\r",
							"    pm.expect(data.id).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"name should match\", function () {\r",
							"    pm.expect(data.name).to.eql(pm.collectionVariables.get(\"store_name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"city should match\", function () {\r",
							"    pm.expect(data.city).to.eql(pm.collectionVariables.get(\"store_city\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"address should match\", function () {\r",
							"    pm.expect(data.address).to.eql(pm.collectionVariables.get(\"store_address\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una tienda que ofrece un producto que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('invalid_resource', pm.variables.replaceIn('{{$randomUUID}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{invalid_resource}}/stores/{{store_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{invalid_resource}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar las tiendas que ofrecen un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it contains added store\", function () {\r",
							"    var found = false; \r",
							"\r",
							"    for (var i = 0; i < data.stores.length; i++) {\r",
							"        if (data.stores[i].id === pm.collectionVariables.get(\"store_id_2\")) {\r",
							"            found = true;\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"\r",
							"    pm.expect(found).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n\t\t\t\t\"id\": \"{{store_id_2}}\",\r\n\t\t\t\t\"name\": \"{{store_name_2}}\",\r\n\t\t\t\t\"city\": \"{{store_city_2}}\",\r\n\t\t\t\t\"address\": \"{{store_address_2}}\"\r\n\t\t}  \r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar las tiendas que ofrecen un producto, con una tienda inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('invalid_resource', pm.variables.replaceIn('{{$randomUUID}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n\t\t\t\t\"id\": \"{{invalid_resource}}\",\r\n\t\t\t\t\"name\": \"{{store_name_2}}\",\r\n\t\t\t\t\"city\": \"{{store_city_2}}\",\r\n\t\t\t\t\"address\": \"{{store_address_2}}\"\r\n\t\t}  \r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar una tienda que ofrece un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id_2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar una tienda que no ofrece un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 412\", function () {\r",
							"    pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id is not associated to the product\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "product_name",
			"value": ""
		},
		{
			"key": "product_price",
			"value": ""
		},
		{
			"key": "product_type",
			"value": ""
		},
		{
			"key": "product_id",
			"value": ""
		},
		{
			"key": "store_name",
			"value": ""
		},
		{
			"key": "store_city",
			"value": ""
		},
		{
			"key": "store_address",
			"value": ""
		},
		{
			"key": "store_id",
			"value": ""
		},
		{
			"key": "store_name_2",
			"value": ""
		},
		{
			"key": "store_city_2",
			"value": ""
		},
		{
			"key": "store_address_2",
			"value": ""
		},
		{
			"key": "store_id_2",
			"value": ""
		},
		{
			"key": "invalid_resource",
			"value": ""
		}
	]
}